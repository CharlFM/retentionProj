finDat <- finDat %>% select(-DepartureMonth)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(GroupGradeTypeLow = ifelse(GroupGradeTypeLow %in% c(NA, "NA", "Undefined"), NA, GroupGradeTypeLow))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(GroupGradeTypeHigh = ifelse(GroupGradeTypeHigh %in% c(NA, "NA", "Undefined"), NA, GroupGradeTypeHigh))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(GroupGradeType = ifelse(GroupGradeType == "Undefined->Undefined", NA, GroupGradeType))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat$Retained %>% table(useNA = "always") %>% prop.table()
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Retained       = as.numeric(Retained),
Retained_class = if_else(Retained == 0, "no", "yes"))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Poverty_Code = ifelse(Poverty_Code %in% c("A", "B", "C", "D"), Poverty_Code, "other"))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Region = ifelse(Region %in% c("Southern California", "Northern California", "Pacific Northwest", "Houston", "Dallas"), Region, "other"))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(CRM_Segment = ifelse(CRM_Segment %in% c("1", "2", "4", "5", "6", "7", "8", "9", "10", "11"), CRM_Segment, "other"))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Parent_Meeting_Flag = if_else(is.na(Parent_Meeting_Flag), "1", Parent_Meeting_Flag))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>%
mutate(MDR_Low_Grade = ifelse(MDR_Low_Grade == "K",  "0", MDR_Low_Grade),
MDR_Low_Grade = ifelse(MDR_Low_Grade == "PK", "-1", MDR_Low_Grade) %>% as.numeric())
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>%
mutate(MDR_High_Grade = ifelse(MDR_High_Grade == "K",  "0", MDR_High_Grade),
MDR_High_Grade = ifelse(MDR_High_Grade == "PK", "-1", MDR_High_Grade) %>% as.numeric())
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Total_School_Enrollment = as.numeric(Total_School_Enrollment))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
plt <- plotTarget(datIn = finDat, var_inspect = "Total_School_Enrollment", target = "Retained",
numvar = T,
autoBin = F)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FPP_to_School_enrollment = gsub(FPP_to_School_enrollment, pattern = ",", replacement = ".") %>% as.numeric())
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FPP_to_School_enrollment = if_else(is.na(FPP_to_School_enrollment) & Total_School_Enrollment > 0 & !is.na(Total_School_Enrollment), FPP/Total_School_Enrollment, FPP_to_School_enrollment))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Income_Level = ifelse(Income_Level %in% c("P", "P1", "P3", "P4", "P5"), "P", Income_Level),
Income_Level = ifelse(Income_Level %in% c("0", "NA", NA, "Z"), "other", Income_Level))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(SPR_New_Existing = if_else(is.na(SPR_New_Existing), "1", SPR_New_Existing))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(NumberOfMeetingswithParents = as.numeric(NumberOfMeetingswithParents))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% select(-FirstMeeting)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>%
mutate(LastMeetingSeason  = getSeason(lubridate::mdy(LastMeeting)),
LastMeetingWeekDay = lubridate::wday(lubridate::mdy(LastMeeting)) %>% as.character(),
LastMeetingWeekDay = ifelse(is.na(LastMeetingWeekDay), "other", LastMeetingWeekDay)) %>%
select(-LastMeeting)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(DifferenceTraveltoFirstMeeting = as.numeric(DifferenceTraveltoFirstMeeting))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(DifferenceTraveltoLastMeeting = as.numeric(DifferenceTraveltoLastMeeting))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(SchoolGradeTypeLow = ifelse(SchoolGradeTypeLow %in% c(NA, "NA", "Undefined"), NA, SchoolGradeTypeLow))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(SchoolGradeTypeHigh = ifelse(SchoolGradeTypeHigh %in% c(NA, "NA", "Undefined"), NA, SchoolGradeTypeHigh))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(SchoolGradeType = ifelse(SchoolGradeType == "Undefined->Undefined", NA, SchoolGradeType))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>%
mutate(depositToDeparture = (lubridate::mdy(Departure_Date) - lubridate::mdy(Deposit_Date)) %>% as.character() %>% as.numeric()) %>%
select(-c(Deposit_Date, Departure_Date))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Special_Pay = ifelse(Special_Pay %in% c("CP", "FR", "SA"), Special_Pay, "other"))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Tuition = as.numeric(Tuition))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(avePrice = as.numeric(SPR_Group_Revenue)/Total_Pax)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(
SPR_Group_Revenue   = as.numeric(SPR_Group_Revenue)
, totDiscount       = Tuition - SPR_Group_Revenue
, propDiscount      = totDiscount/Tuition
)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FRP_Active = as.numeric(FRP_Active))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FRP_Cancelled = as.numeric(FRP_Cancelled))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FRP_Take_up_percent_ = gsub(FRP_Take_up_percent_, pattern = ",", replacement = ".") %>% as.numeric())
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(EZ_Pay_Take_Up_Rate = gsub(EZ_Pay_Take_Up_Rate, pattern = ",", replacement = ".") %>% as.numeric())
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(School_Sponsor = if_else(is.na(School_Sponsor), "0", School_Sponsor))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FPP_to_PAX = gsub(FPP_to_PAX, pattern = ",", replacement = ".") %>% as.numeric())
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(FPP_to_PAX = if_else(is.na(FPP_to_PAX) & Total_Pax > 0 & !is.na(Total_Pax), FPP/Total_Pax, FPP_to_PAX))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(Num_of_Non_FPP_PAX = as.numeric(Num_of_Non_FPP_PAX))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(pol_min = as.numeric(pol_min),
pol_min = ifelse(is.na(pol_min), 0, pol_min))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(pol_mean = as.numeric(pol_mean),
pol_mean = ifelse(is.na(pol_mean), 0, pol_mean))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(pol_med = as.numeric(pol_med),
pol_med = ifelse(is.na(pol_med), 0, pol_med))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(pol_max = as.numeric(pol_max),
pol_max = ifelse(is.na(pol_max), 0, pol_max))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(sub_min = as.numeric(sub_min),
sub_min = ifelse(is.na(sub_min), 0, sub_min))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(sub_mean = as.numeric(sub_mean),
sub_mean = ifelse(is.na(sub_mean), 0, sub_mean))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(sub_med = as.numeric(sub_med),
sub_med = ifelse(is.na(sub_med), 0, sub_med))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(sub_max = as.numeric(sub_max),
sub_max = ifelse(is.na(sub_max), 0, sub_max))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(twl_min = as.numeric(twl_min),
twl_min = ifelse(is.na(twl_min), 0, twl_min))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(twl_mean = as.numeric(twl_mean),
twl_mean = ifelse(is.na(twl_mean), 0, twl_mean))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(twl_med = as.numeric(twl_med),
twl_med = ifelse(is.na(twl_med), 0, twl_med))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(twl_max = as.numeric(twl_max),
twl_max = ifelse(is.na(twl_max), 0, twl_max))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(numTweets = as.numeric(numTweets),
numTweets = ifelse(is.na(numTweets), 0, numTweets))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_0 = as.numeric(top_0),
top_0 = ifelse(is.na(top_0), 0, top_0))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_1 = as.numeric(top_1),
top_1 = ifelse(is.na(top_1), 0, top_1))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_2 = as.numeric(top_2),
top_2 = ifelse(is.na(top_2), 0, top_2))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_3 = as.numeric(top_3),
top_3 = ifelse(is.na(top_3), 0, top_3))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_4 = as.numeric(top_4),
top_4 = ifelse(is.na(top_4), 0, top_4))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_5 = as.numeric(top_5),
top_5 = ifelse(is.na(top_5), 0, top_5))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_6 = as.numeric(top_6),
top_6 = ifelse(is.na(top_6), 0, top_6))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_7 = as.numeric(top_7),
top_7 = ifelse(is.na(top_7), 0, top_7))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_8 = as.numeric(top_8),
top_8 = ifelse(is.na(top_8), 0, top_8))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>% mutate(top_9 = as.numeric(top_9),
top_9 = ifelse(is.na(top_9), 0, top_9))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# finDat <- finDat %>% select(-c(pol_min, pol_max, pol_mean))
# finDat <- finDat %>% select(-c(sub_min, sub_max, sub_mean))
# finDat <- finDat %>% select(-c(twl_min, twl_max, twl_mean))
# finDat <- finDat %>% select(-starts_with("top_"))
# finDat <- finDat %>% select(-c(Total_Discount_Pax, Num_of_Non_FPP_PAX))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# highlyCorDescr <- cor(finDat %>% select_if(is.numeric), use = "complete.obs") %>%
#   as.data.frame() %>%
#   mutate(var1 = rownames(.)) %>%
#   tidyr::gather(var2, value, -var1) %>%
#   arrange(desc(value)) %>%
#   group_by(value) %>%
#   filter(row_number()==1, abs(value) < 1, abs(value) > 0.8)
#
# finDat <- finDat %>% select(-c(FPP, Tuition, To_Grade, Cancelled_Pax, FRP_Active))
# rm(highlyCorDescr)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# nzv <- caret::nearZeroVar(finDat, saveMetrics = TRUE) %>% filter(zeroVar == TRUE | nzv == TRUE)
# finDat <- finDat %>% select(-c(rownames(nzv)))
# rm(nzv)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
finDat <- finDat %>%
mutate_if(.predicate = is.character,
.funs = function(x) { x[is.na(x)] <- "other"; return(x)})
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(2020)
splitIndex <- createDataPartition(finDat$Retained_class, p = .75, list  = FALSE, times = 1)
trainDF <- finDat[splitIndex,  ]
testDF  <- finDat[-splitIndex, ]
rm(splitIndex, finDat)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
trainDF_targ <- trainDF %>% select(Retained)
trainDF      <- trainDF %>% select(-Retained)
trainDF_cat  <- trainDF %>% select_if(is.character)
trainDF_num  <- trainDF %>% select_if(is.numeric)
nb_pca      <- missMDA::estim_ncpPCA(trainDF_num, ncp.max = 5)
resMI_pca   <- missMDA::MIPCA(trainDF_num,        ncp = nb_pca$ncp)
trainDF_num <- resMI_pca$res.imputePCA %>% as_tibble()
trainDF <- bind_cols(trainDF_targ, trainDF_cat, trainDF_num)
trainDF <- trainDF %>% mutate(MDR_High_Grade_Class = if_else(MDR_High_Grade <= 8, "lower", "higher"))
rm(nb_pca, resMI_pca, trainDF_targ, trainDF_cat, trainDF_num)
testDF_targ <- testDF %>% select(Retained)
testDF      <- testDF %>% select(-Retained)
testDF_cat  <- testDF %>% select_if(is.character)
testDF_num  <- testDF %>% select_if(is.numeric)
nb_pca     <- missMDA::estim_ncpPCA(testDF_num, ncp.max = 5)
resMI_pca  <- missMDA::MIPCA(testDF_num,        ncp = nb_pca$ncp)
testDF_num <- resMI_pca$res.imputePCA %>% as_tibble()
testDF <- bind_cols(testDF_targ, testDF_cat, testDF_num)
testDF <- testDF %>% mutate(MDR_High_Grade_Class = if_else(MDR_High_Grade <= 8, "lower", "higher"))
rm(nb_pca, resMI_pca, testDF_targ, testDF_cat, testDF_num)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
c(names(trainDF)[colSums(is.na(trainDF)) > 0], names(testDF)[colSums(is.na(testDF)) > 0])
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Make sure we have consistent categorical levels
formFeats  <- names(trainDF)[!(names(trainDF) %in% c("ID_SALES", "Retained", "Retained_class"))]
modFormula <- formula(paste0("Retained_class ~ ", paste0(formFeats, collapse = " + ")))
blueprint <- recipes::recipe(modFormula, data = trainDF) %>% recipes::step_scale(recipes::all_numeric())
h2o::h2o.init(nthreads = 8, enable_assertions = FALSE)
# Create training & test sets for h2o
train_h2o <- recipes::prep(blueprint, training = trainDF, retain = TRUE) %>%
recipes::juice() %>%
h2o::as.h2o(destination_frame = "train_h2o_NEW")
test_h2o <- recipes::prep(blueprint, training = trainDF) %>%
recipes::bake(new_data = testDF) %>%
h2o::as.h2o(destination_frame = "test_h2o_NEW")
# Get response and feature names
Y <- "Retained_class"
X <- formFeats
res <- tibble(model    = c("glm",   "glm",  "nb",    "nb",   "svm",   "svm",  "gbm",   "gbm",  "nn",    "nn",   "stacked", "stacked", "auto",    "auto"),
set      = c("train", "test", "train", "test", "train", "test", "train", "test", "train", "test", "train",   "test",    "train",   "test"),
auc      = c(NA,      NA,     NA,      NA,     NA,      NA,     NA,      NA,     NA,      NA,     NA,        NA,        NA,        NA),
accuracy = c(NA,      NA,     NA,      NA,     NA,      NA,     NA,      NA,     NA,      NA,     NA,        NA,        NA,        NA),
f1_score = c(NA,      NA,     NA,      NA,     NA,      NA,     NA,      NA,     NA,      NA,     NA,        NA,        NA,        NA))
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
aml <- h2o::h2o.automl(
x                                     = X
, y                                     = Y
, training_frame                        = train_h2o
, max_runtime_secs                      = 3600
, seed                                  = 1
, nfolds                                = 5
, keep_cross_validation_predictions     = TRUE
, keep_cross_validation_fold_assignment = TRUE
)
scores <- c()
for (md in aml@leaderboard %>% as_tibble() %>% pull(model_id)) {
autoScore <- h2o::h2o.getModel(md)
scores <- c(scores, autoScore@model$training_metrics@metrics$AUC)
}
mods <- aml@leaderboard %>% as_tibble() %>% pull(model_id)
best_auto <- h2o::h2o.getModel(mods[which(scores == max(scores[scores<0.999]))])
# Now let's evaluate the model performance on a test set so we get an honest estimate of top model performance
auto_perf_test <- h2o::h2o.performance(
model   = best_auto
, newdata = test_h2o
)
auto_perf_train <- h2o::h2o.performance(
model   = best_auto
, newdata = train_h2o
)
## Get the results for Train
f1_thresh_auto <- best_auto@model$default_threshold
res$auc     [res$model == "auto" & res$set == "train"] <- h2o::h2o.auc(object = auto_perf_train)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "train"] <- h2o::h2o.F1(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "train"] <- h2o::h2o.accuracy(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
## Get the results for Train
res$auc[res$model == "auto" & res$set == "test"] <- h2o::h2o.auc(object = auto_perf_test)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "test"] <- h2o::h2o.F1(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "test"] <- h2o::h2o.accuracy(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res %>% filter(!is.na(f1_score)) %>% tail(6)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allMods <- h2o::h2o.list_models()
allMods <- h2o::h2o.list_models()
allModsRes <- tibble(modID = allMods) %>% mutate(trainF1 = 0, testF1 = 0)
for (ii in 1:length(allMods)) {
mod    <- allMods[ii]
modObj <- h2o::h2o.getModel(mod)
all_perf_test  <- h2o::h2o.performance(model = modObj, newdata = test_h2o)
all_perf_train <- h2o::h2o.performance(model = modObj, newdata = train_h2o)
allModsRes$modID[ii]   <- mod
f1_thresh_all          <- modObj@model$default_threshold
allModsRes$trainF1[ii] <- h2o::h2o.F1(object = all_perf_train, thresholds = f1_thresh_all)[[1]] %>% round(4)
allModsRes$testF1[ii]  <- h2o::h2o.F1(object = all_perf_test, thresholds = f1_thresh_all)[[1]] %>% round(4)
}
allModsRes <- allModsRes %>% mutate(diff = abs(trainF1 - testF1)) %>% arrange(-testF1) %>% filter(trainF1 < 1, diff < 0.05)
allModsRes %>% filter(!grepl(x = modID, pattern = "_cv_"))
View(allModsRes)
aml@leaderboard
scores
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
aml <- h2o::h2o.automl(
x                                     = X
, y                                     = Y
, training_frame                        = train_h2o
, max_runtime_secs                      = 3600
, seed                                  = 1
, exploitation_ratio                    = 0.1
, nfolds                                = 5
, keep_cross_validation_predictions     = TRUE
, keep_cross_validation_fold_assignment = TRUE
)
scores <- c()
for (md in aml@leaderboard %>% as_tibble() %>% pull(model_id)) {
autoScore <- h2o::h2o.getModel(md)
scores    <- c(scores, autoScore@model$training_metrics@metrics$AUC)
}
mods <- aml@leaderboard %>% as_tibble() %>% pull(model_id)
best_auto <- h2o::h2o.getModel(mods[which(scores == max(scores[scores<0.999]))])
auto_perf_train <- h2o::h2o.performance(
model   = best_auto
, newdata = train_h2o
)
# Now let's evaluate the model performance on a test set so we get an honest estimate of top model performance
auto_perf_test <- h2o::h2o.performance(
model   = best_auto
, newdata = test_h2o
)
f1_thresh_auto <- best_auto@model$default_threshold
res$auc     [res$model == "auto" & res$set == "train"] <- h2o::h2o.auc(object = auto_perf_train)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "train"] <- h2o::h2o.F1(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "train"] <- h2o::h2o.accuracy(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
## Get the results for Train
res$auc[res$model == "auto" & res$set == "test"] <- h2o::h2o.auc(object = auto_perf_test)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "test"] <- h2o::h2o.F1(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "test"] <- h2o::h2o.accuracy(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res %>% filter(!is.na(f1_score)) %>% tail(6)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allMods <- h2o::h2o.list_models()
allModsRes <- tibble(modID = allMods) %>% mutate(trainF1 = 0, testF1 = 0)
for (ii in 1:length(allMods)) {
mod    <- allMods[ii]
modObj <- h2o::h2o.getModel(mod)
all_perf_test  <- h2o::h2o.performance(model = modObj, newdata = test_h2o)
all_perf_train <- h2o::h2o.performance(model = modObj, newdata = train_h2o)
allModsRes$modID[ii]   <- mod
f1_thresh_all          <- modObj@model$default_threshold
allModsRes$trainF1[ii] <- h2o::h2o.F1(object = all_perf_train, thresholds = f1_thresh_all)[[1]] %>% round(4)
allModsRes$testF1[ii]  <- h2o::h2o.F1(object = all_perf_test, thresholds = f1_thresh_all)[[1]] %>% round(4)
}
allModsRes <- allModsRes %>% mutate(diff = abs(trainF1 - testF1)) %>% arrange(-testF1) %>% filter(trainF1 < 1, diff < 0.05)
allModsRes %>% filter(!grepl(x = modID, pattern = "_cv_"))
View(allModsRes)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
aml <- h2o::h2o.automl(
x                                     = X
, y                                     = Y
, training_frame                        = train_h2o
, max_runtime_secs                      = 3600
, seed                                  = 1
, exploitation_ratio                    = 0.1
, project_name                          = "autoTest"
, nfolds                                = 5
, keep_cross_validation_predictions     = TRUE
, keep_cross_validation_fold_assignment = TRUE
)
scores <- c()
for (md in aml@leaderboard %>% as_tibble() %>% pull(model_id)) {
autoScore <- h2o::h2o.getModel(md)
scores    <- c(scores, autoScore@model$training_metrics@metrics$AUC)
}
mods <- aml@leaderboard %>% as_tibble() %>% pull(model_id)
best_auto <- h2o::h2o.getModel(mods[which(scores == max(scores[scores<0.999]))])
# Now let's evaluate the model performance on a test set so we get an honest estimate of top model performance
auto_perf_test <- h2o::h2o.performance(
model   = best_auto
, newdata = test_h2o
)
auto_perf_train <- h2o::h2o.performance(
model   = best_auto
, newdata = train_h2o
)
## Get the results for Train
f1_thresh_auto <- best_auto@model$default_threshold
res$auc     [res$model == "auto" & res$set == "train"] <- h2o::h2o.auc(object = auto_perf_train)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "train"] <- h2o::h2o.F1(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "train"] <- h2o::h2o.accuracy(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
## Get the results for Train
res$auc[res$model == "auto" & res$set == "test"] <- h2o::h2o.auc(object = auto_perf_test)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "test"] <- h2o::h2o.F1(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "test"] <- h2o::h2o.accuracy(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res %>% filter(!is.na(f1_score)) %>% tail(6)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allMods <- h2o::h2o.list_models()
allModsRes <- tibble(modID = allMods) %>% mutate(trainF1 = 0, testF1 = 0)
for (ii in 1:length(allMods)) {
mod    <- allMods[ii]
modObj <- h2o::h2o.getModel(mod)
all_perf_test  <- h2o::h2o.performance(model = modObj, newdata = test_h2o)
all_perf_train <- h2o::h2o.performance(model = modObj, newdata = train_h2o)
allModsRes$modID[ii]   <- mod
f1_thresh_all          <- modObj@model$default_threshold
allModsRes$trainF1[ii] <- h2o::h2o.F1(object = all_perf_train, thresholds = f1_thresh_all)[[1]] %>% round(4)
allModsRes$testF1[ii]  <- h2o::h2o.F1(object = all_perf_test, thresholds = f1_thresh_all)[[1]] %>% round(4)
}
allModsRes <- allModsRes %>% mutate(diff = abs(trainF1 - testF1)) %>% arrange(-testF1) %>% filter(trainF1 < 1, diff < 0.05)
allModsRes %>% filter(!grepl(x = modID, pattern = "_cv_"))
aml@leaderboard
allModsRes <- allModsRes %>% mutate(diff = abs(trainF1 - testF1)) %>% arrange(-testF1)
View(allModsRes)
aml <- h2o::h2o.automl(
x                                     = X
, y                                     = Y
, training_frame                        = train_h2o
, max_runtime_secs                      = 3600
, seed                                  = 1
, project_name                          = "autoTest"
, nfolds                                = 2
, keep_cross_validation_predictions     = TRUE
, keep_cross_validation_fold_assignment = TRUE
)
scores <- c()
for (md in aml@leaderboard %>% as_tibble() %>% pull(model_id)) {
autoScore <- h2o::h2o.getModel(md)
scores    <- c(scores, autoScore@model$training_metrics@metrics$AUC)
}
mods <- aml@leaderboard %>% as_tibble() %>% pull(model_id)
best_auto <- h2o::h2o.getModel(mods[which(scores == max(scores[scores<0.999]))])
# Now let's evaluate the model performance on a test set so we get an honest estimate of top model performance
auto_perf_test <- h2o::h2o.performance(
model   = best_auto
, newdata = test_h2o
)
auto_perf_train <- h2o::h2o.performance(
model   = best_auto
, newdata = train_h2o
)
## Get the results for Train
f1_thresh_auto <- best_auto@model$default_threshold
res$auc     [res$model == "auto" & res$set == "train"] <- h2o::h2o.auc(object = auto_perf_train)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "train"] <- h2o::h2o.F1(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "train"] <- h2o::h2o.accuracy(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
## Get the results for Train
res$auc[res$model == "auto" & res$set == "test"] <- h2o::h2o.auc(object = auto_perf_test)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "test"] <- h2o::h2o.F1(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "test"] <- h2o::h2o.accuracy(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res %>% filter(!is.na(f1_score)) %>% tail(6)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allMods <- h2o::h2o.list_models()
allModsRes <- tibble(modID = allMods) %>% mutate(trainF1 = 0, testF1 = 0)
for (ii in 1:length(allMods)) {
mod    <- allMods[ii]
modObj <- h2o::h2o.getModel(mod)
all_perf_test  <- h2o::h2o.performance(model = modObj, newdata = test_h2o)
all_perf_train <- h2o::h2o.performance(model = modObj, newdata = train_h2o)
allModsRes$modID[ii]   <- mod
f1_thresh_all          <- modObj@model$default_threshold
allModsRes$trainF1[ii] <- h2o::h2o.F1(object = all_perf_train, thresholds = f1_thresh_all)[[1]] %>% round(4)
allModsRes$testF1[ii]  <- h2o::h2o.F1(object = all_perf_test, thresholds = f1_thresh_all)[[1]] %>% round(4)
}
allModsRes <- allModsRes %>% mutate(diff = abs(trainF1 - testF1)) %>% arrange(-testF1)
allModsRes %>% filter(!grepl(x = modID, pattern = "_cv_"))
View(allModsRes)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
aml <- h2o::h2o.automl(
x                                     = X
, y                                     = Y
, training_frame                        = train_h2o
, max_runtime_secs                      = 3600
, seed                                  = 1
, project_name                          = "autoTest"
, nfolds                                = 10
, keep_cross_validation_predictions     = TRUE
, keep_cross_validation_fold_assignment = TRUE
)
scores <- c()
for (md in aml@leaderboard %>% as_tibble() %>% pull(model_id)) {
autoScore <- h2o::h2o.getModel(md)
scores    <- c(scores, autoScore@model$training_metrics@metrics$AUC)
}
mods <- aml@leaderboard %>% as_tibble() %>% pull(model_id)
best_auto <- h2o::h2o.getModel(mods[which(scores == max(scores[scores<0.999]))])
# Now let's evaluate the model performance on a test set so we get an honest estimate of top model performance
auto_perf_test <- h2o::h2o.performance(
model   = best_auto
, newdata = test_h2o
)
auto_perf_train <- h2o::h2o.performance(
model   = best_auto
, newdata = train_h2o
)
## Get the results for Train
f1_thresh_auto <- best_auto@model$default_threshold
res$auc     [res$model == "auto" & res$set == "train"] <- h2o::h2o.auc(object = auto_perf_train)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "train"] <- h2o::h2o.F1(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "train"] <- h2o::h2o.accuracy(object = auto_perf_train, thresholds = f1_thresh_auto)[[1]] %>% round(4)
## Get the results for Train
res$auc[res$model == "auto" & res$set == "test"] <- h2o::h2o.auc(object = auto_perf_test)[[1]] %>% round(4)
res$f1_score[res$model == "auto" & res$set == "test"] <- h2o::h2o.F1(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res$accuracy[res$model == "auto" & res$set == "test"] <- h2o::h2o.accuracy(object = auto_perf_test, thresholds = f1_thresh_auto)[[1]] %>% round(4)
res %>% filter(!is.na(f1_score)) %>% tail(6)
## ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allMods <- h2o::h2o.list_models()
allModsRes <- tibble(modID = allMods) %>% mutate(trainF1 = 0, testF1 = 0)
for (ii in 1:length(allMods)) {
mod    <- allMods[ii]
modObj <- h2o::h2o.getModel(mod)
all_perf_test  <- h2o::h2o.performance(model = modObj, newdata = test_h2o)
all_perf_train <- h2o::h2o.performance(model = modObj, newdata = train_h2o)
allModsRes$modID[ii]   <- mod
f1_thresh_all          <- modObj@model$default_threshold
allModsRes$trainF1[ii] <- h2o::h2o.F1(object = all_perf_train, thresholds = f1_thresh_all)[[1]] %>% round(4)
allModsRes$testF1[ii]  <- h2o::h2o.F1(object = all_perf_test, thresholds = f1_thresh_all)[[1]] %>% round(4)
}
allModsRes <- allModsRes %>% mutate(diff = abs(trainF1 - testF1)) %>% arrange(-testF1)
allModsRes %>% filter(!grepl(x = modID, pattern = "_cv_"))
View(allModsRes)
