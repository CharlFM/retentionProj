tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis2 = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE,
overlaying = "y",
side = "right")) %>%
layout(margin = list(l = 50, r = 50, b = 50, t = 50, pad = 4))
return(p)
}
# Load Data ---------------------------------------------------------------
emplAdr   <- read_csv(file = "0_data/1_core/rawAdr.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
officeAdr <- read_csv(file = "0_data/1_core/officeLocs.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
geoCodeOff <- preciseGeoCoder(idVec        = officeAdr$id,
street       = paste0(officeAdr$street, officeAdr$streetNum),  streetNAs     = NULL,
city         = officeAdr$city,                                 cityNAs       = NULL,
postalcode   = officeAdr$zipCode,                              postalcodeNAs = NULL,
country      = "Belgium",                                      countryNAs    = NULL,
min_time     = 0,
api_url      = "http://localhost:8080/",
full_results = TRUE,
progbar      = TRUE)
View(geoCodeOff)
geoCodeEmp <- preciseGeoCoder(idVec        = emplAdr$id,
street       = paste0(emplAdr$street, emplAdr$streetNum),  streetNAs     = NULL,
city         = emplAdr$city,                               cityNAs       = NULL,
postalcode   = emplAdr$zipCode,                            postalcodeNAs = NULL,
country      = "Belgium",                                  countryNAs    = NULL,
min_time     = 0,
api_url      = "http://localhost:8080/",
full_results = TRUE,
progbar      = TRUE)
View(geoCodeEmp)
# Setup and Load Packages -------------------------------------------------
options(scipen = 999)
if (!is.element("yaml",     .packages(all.available = TRUE))) { install.packages("yaml")     }
if (!is.element("devtools", .packages(all.available = TRUE))) { install.packages("devtools") }
# Load Meta Data
metaData <- yaml::read_yaml(file = "metadat.yaml")
devtools::install_github(repo = metaData$connectionDetails$github$repo, auth_token = metaData$connectionDetails$github$token)
source(file = "1_code/0_functions/preciseGeoCoder.R")
Rcpp::sourceCpp("1_code/0_functions/distance_calcs.cpp")
eaR::utl_pkgInstaller(libs = c("tidyverse", "tidygeocoder", "RCurl", "plotly", "countrycode", "datetimeutils", "gtools", "leaflet", "sp", "raster", "geosphere", "jsonlite", "summarytools"), destinationFolder = "D:/packages")
library(dplyr)
# Custom plotly style function
plotlyStyle <- function(datInt, nameTitle) {
p <- datInt %>% plotly::layout(title = nameTitle,
paper_bgcolor ='rgb(255,255,255)', plot_bgcolor = 'rgb(229,229,229)',
xaxis = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis2 = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE,
overlaying = "y",
side = "right")) %>%
layout(margin = list(l = 50, r = 50, b = 50, t = 50, pad = 4))
return(p)
}
# Load Data ---------------------------------------------------------------
emplAdr   <- read_csv(file = "0_data/1_core/rawAdr.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
officeAdr <- read_csv(file = "0_data/1_core/officeLocs.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
geoCodeEmp <- preciseGeoCoder(idVec        = emplAdr$id,
street       = paste0(emplAdr$street, emplAdr$streetNum),  streetNAs     = NULL,
city         = emplAdr$city,                               cityNAs       = NULL,
postalcode   = emplAdr$zipCode,                            postalcodeNAs = NULL,
country      = "Belgium",                                  countryNAs    = NULL,
min_time     = 0,
api_url      = "http://localhost:8080/",
full_results = TRUE,
progbar      = TRUE)
geoCodeOff <- preciseGeoCoder(idVec        = officeAdr$id,
street       = paste0(officeAdr$street, officeAdr$streetNum),  streetNAs     = NULL,
city         = officeAdr$city,                                 cityNAs       = NULL,
postalcode   = officeAdr$zipCode,                              postalcodeNAs = NULL,
country      = "Belgium",                                      countryNAs    = NULL,
min_time     = 0,
api_url      = "http://localhost:8080/",
full_results = TRUE,
progbar      = TRUE)
View(emplAdr)
View(geoCodeEmp)
View(emplAdr)
emplAdr   <- read_csv(file = "0_data/1_core/rawAdr.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
officeAdr <- read_csv(file = "0_data/1_core/officeLocs.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
geoCodeOff <- preciseGeoCoder(idVec        = officeAdr$id,
street       = paste0(officeAdr$street, officeAdr$streetNum),  streetNAs     = NULL,
city         = officeAdr$city,                                 cityNAs       = NULL,
postalcode   = officeAdr$zipCode,                              postalcodeNAs = NULL,
country      = "Belgium",                                      countryNAs    = NULL,
min_time     = 0,
api_url      = "http://localhost:8080/",
full_results = TRUE,
progbar      = TRUE)
View(geoCodeOff)
geoCodeEmp <- preciseGeoCoder(idVec        = emplAdr$id,
street       = paste0(emplAdr$street, emplAdr$streetNum),  streetNAs     = NULL,
city         = emplAdr$city,                               cityNAs       = NULL,
postalcode   = emplAdr$zipCode,                            postalcodeNAs = NULL,
country      = "Belgium",                                  countryNAs    = NULL,
min_time     = 0,
api_url      = "http://localhost:8080/",
full_results = TRUE,
progbar      = TRUE)
country <- "belgium"
# Download new maps - NOTE, this is a large download (more than 3GB)
download.file(url      = paste0("http://download.geofabrik.de/europe/", country, "-latest.osm.pbf"),
destfile = paste0("3_misc/latest.osm.pbf"))
download.file(url      = "https://raw.githubusercontent.com/MorbZ/OsmPoisPbf/master/doc/poi_types.csv",
destfile = paste0("3_misc/poi_types_dict.csv"))
pois_dict <- readr::read_csv("3_misc/poi_types_dict.csv")
pois_dict <- pois_dict[!is.na(pois_dict$CODE), ]
pois_dict %>% as.tibble()
country <- "belgium"
download.file(url      = paste0("http://download.geofabrik.de/europe/", country, "-latest.osm.pbf"),
destfile = paste0("3_misc/latest.osm.pbf"))
country <- "maldives"
download.file(url      = paste0("http://download.geofabrik.de/europe/", country, "-latest.osm.pbf"),
destfile = paste0("3_misc/latest.osm.pbf"))
country <- "albania"
download.file(url      = paste0("http://download.geofabrik.de/europe/", country, "-latest.osm.pbf"),
destfile = paste0("3_misc/latest.osm.pbf"))
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_5  <- NA
pb <- txtProgressBar(min = 0, max = nrow(datFin), initial = 0, style = 3)
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_5  <- NA
for (ii in 1:nrow(clDat)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
clDat$driving_dist_1[ii] <- res$routes$distance
clDat$driving_dur_1[ii]  <- res$routes$duration
clDat$driving_dist_2[ii] <- res$routes$distance
clDat$driving_dur_2[ii]  <- res$routes$duration
clDat$driving_dist_3[ii] <- res$routes$distance
clDat$driving_dur_3[ii]  <- res$routes$duration
clDat$driving_dist_4[ii] <- res$routes$distance
clDat$driving_dur_4[ii]  <- res$routes$duration
}
}
for (ii in 1:nrow(clDat)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration
}
}
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration
}
}
res
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_5  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:6000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration
}
}
View(geoCodeEmp)
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_5  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration
}
}
qry
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_5  <- NA
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
qry
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_5  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration
}
}
View(geoCodeEmp)
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_4  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration
}
}
View(geoCodeOff)
View(geoCodeEmp)
geoCodeEmp %>% eaR::utl_copyToClipboard()
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_4  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration/60
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration/60
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration/60
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration/60
}
}
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_4  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
geoCodeEmp$driving_dist_1[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_1[ii]  <- res$routes$duration/60
geoCodeEmp$driving_dist_2[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_2[ii]  <- res$routes$duration/60
geoCodeEmp$driving_dist_3[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_3[ii]  <- res$routes$duration/60
geoCodeEmp$driving_dist_4[ii] <- res$routes$distance/1000
geoCodeEmp$driving_dur_4[ii]  <- res$routes$duration/60
}
}
geoCodeEmp %>% eaR::utl_copyToClipboard()
geoCodeEmp$driving_dist_1 <- NA
geoCodeEmp$driving_dur_1  <- NA
geoCodeEmp$driving_dist_2 <- NA
geoCodeEmp$driving_dur_2  <- NA
geoCodeEmp$driving_dist_3 <- NA
geoCodeEmp$driving_dur_3  <- NA
geoCodeEmp$driving_dist_4 <- NA
geoCodeEmp$driving_dur_4  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
distVar <- paste0("driving_dist_", jj)
durVar  <- paste0("driving_dur_", jj)
geoCodeEmp[[distVar]][ii] <- res$routes$distance/1000
geoCodeEmp[[durVar]][ii]  <- res$routes$duration/60
}
}
View(geoCodeEmp)
geoCodeEmp %>% eaR::utl_copyToClipboard()
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
qry
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
res
qry <- paste0("http://127.0.0.1:6000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
res
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
jsonlite::fromJSON(qry)
geoCodeEmp$cycling_dist_1 <- NA
geoCodeEmp$cycling_dur_1  <- NA
geoCodeEmp$cycling_dist_2 <- NA
geoCodeEmp$cycling_dur_2  <- NA
geoCodeEmp$cycling_dist_3 <- NA
geoCodeEmp$cycling_dur_3  <- NA
geoCodeEmp$cycling_dist_4 <- NA
geoCodeEmp$cycling_dur_4  <- NA
for (ii in 1:nrow(geoCodeEmp)) {
for (jj in 1:nrow(geoCodeOff)) {
qry <- paste0("http://127.0.0.1:5000/route/v1/driving/", geoCodeEmp$long[ii], ",", geoCodeEmp$lat[ii], ";", geoCodeOff$long[jj], ",", geoCodeOff$lat[jj], "?overview=false")
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
if (grepl("Error", res[1])) {
res <- try(jsonlite::fromJSON(qry), silent = TRUE)
}
if (grepl("Error", res[1])) next()
distVar <- paste0("cycling_dist_", jj)
durVar  <- paste0("cycling_dur_", jj)
geoCodeEmp[[distVar]][ii] <- res$routes$distance/1000
geoCodeEmp[[durVar]][ii]  <- res$routes$duration/60
}
}
geoCodeEmp %>% eaR::utl_copyToClipboard()
# Setup and Load Packages -------------------------------------------------
options(scipen = 999)
if (!is.element("yaml",     .packages(all.available = TRUE))) { install.packages("yaml")     }
if (!is.element("devtools", .packages(all.available = TRUE))) { install.packages("devtools") }
# Load Meta Data
metaData <- yaml::read_yaml(file = "metadat.yaml")
devtools::install_github(repo = metaData$connectionDetails$github$repo, auth_token = metaData$connectionDetails$github$token)
source(file = "1_code/0_functions/preciseGeoCoder.R")
Rcpp::sourceCpp("1_code/0_functions/distance_calcs.cpp")
eaR::utl_pkgInstaller(libs = c("tidyverse", "tidygeocoder", "RCurl", "plotly", "countrycode", "datetimeutils", "gtools", "leaflet", "sp", "raster", "geosphere", "jsonlite", "summarytools"), destinationFolder = "D:/packages")
library(dplyr)
# Custom plotly style function
plotlyStyle <- function(datInt, nameTitle) {
p <- datInt %>% plotly::layout(title = nameTitle,
paper_bgcolor ='rgb(255,255,255)', plot_bgcolor = 'rgb(229,229,229)',
xaxis = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE),
yaxis2 = list(gridcolor = 'rgb(255,255,255)',
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tickcolor = 'rgb(127,127,127)',
ticks = 'outside',
zeroline = FALSE,
overlaying = "y",
side = "right")) %>%
layout(margin = list(l = 50, r = 50, b = 50, t = 50, pad = 4))
return(p)
}
# Load Data ---------------------------------------------------------------
emplAdr   <- read_csv(file = "0_data/1_core/rawAdr.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
officeAdr <- read_csv(file = "0_data/1_core/officeLocs.csv") %>%
mutate(street = street %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"),
city   = city   %>% gsub(pattern = "_", replacement = " ") %>% stringr::str_to_title() %>% trimws(which = "both"))
View(emplAdr)
emplAdr %>% eaR::utl_copyToClipboard()
